#!/bin/sh -e

# Copyright (c) 2012-2013 Slawomir Wojciech Wojtczak (vermaden)
# Copyright (c) 2012-2013 Bryan Drewery (bdrewery)
# Copyright (c) 2012-2013 Mike Clarke (rawthey)
# Copyright (c) 2013      Dancho Penev (dpslavov)
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS 'AS IS' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

unset LC_ALL
unset LANG
PATH=/bin:/sbin:/rescue

VERBOSE="NO"
DOIT="YES"

usage() {
    local NAME=${0##*/}
    echo "usage:"
    echo "  ${NAME} activate <beName>"
    echo "  ${NAME} create [-e nonActiveBe | -e beName@snapshot] <beName>"
    echo "  ${NAME} create <beName@snapshot>"
    echo "  ${NAME} destroy [-F] <beName | beName@snapshot>"
    echo "  ${NAME} list [-a] [-s] [-D] [-H]"
    echo "  ${NAME} rename <origBeName> <newBeName>"
    echo "  ${NAME} mount <beName> [mountpoint]"
    echo "  ${NAME} { umount | unmount } [-f] <beName>"
    exit 1
}

# Utilities

exec 3>&2
doit () {
    if [ $DOIT = YES ]
    then
        [ $VERBOSE = YES ]  && echo "+ $*" >&3
        "$@"
    else
        [ $VERBOSE = YES ]  && echo "- $*" >&3
        return 0
    fi
}

warn () {
    for l in "$@"
    do
        echo "$l" >&3
    done
}

# It's stupidly hard to reliably get out of a shell script
trap 'exit 1' USR1
PARENT=$$
die () {
    for l in "$@"
    do
        echo "ERROR: $l" >&3
    done
    kill -USR1 $PARENT
    exit 1
}

doopts () {
    local opts="$1"
    shift

    local vars=
    while [ "$1" != "--" ]
    do
        vars="$vars$1:"
        shift
    done
    shift

    if [ "$opts" != "-" ]
    then
        local opt= OPTIND= OPTARG=
        while getopts "$opts" opt
        do
            [ "$opt" = "?" ] && return 1
            if [ -n "$OPTARG" ]
            then
                setvar "opt_$opt" "$OPTARG"
            else
                setvar "opt_$opt" "-$opt"
            fi
        done
        shift $((OPTIND - 1))
    fi

    local v=
    local IFS=":"
    for v in $vars
    do
        [ $# -gt 0 ] || return 1
        setvar "$v" "$1"
        shift
    done
}

# some characters...
HT="$(printf '\t')"
NL="$(printf '\nX')"
NL="${NL%X}"
FS="$(printf '\034')"

# read tab-separated output from zfs list/get -H
t_read () {
    local IFS="$HT"
    read -r "$@"
}

# We don't have grep, so fake it. All use EREs, and only read from
# stdin. Assume we don't want to use a rx with a literal FS in.

sgrep () { 
    sed -nEe"\\${FS}$1${FS}p" 
}
vgrep () { 
    sed -Ee"\\${FS}$1${FS}d" 
}
qgrep () {
    [ -n "$(sed -nEe"\\${FS}$1${FS}{=;q;}")" ]
}

# Sometimes all you need is a string match.

in_str () {
    case "$1" in
    *"$2"*)   return 0    ;;
    esac
    return 1
}

# Or a glob. 

fnmatch () {
    if [ -z "$1" ]
    then
        case "$2" in
        "*"|"")   return 0    ;;
        *)      return 1    ;;
        esac
    fi
    [ -z "${1##$2}" ]
}

# uniq on the first field of the line. Assumes sorted input.

uniq () {
    local last="$NL"    # no line matches a newline character
    local l= k=

    while read -r l
    do
        k="${l%%$HT*}"
        [ "$k" = "$last" ] && continue
        last="$k"
        echo "$l"
    done
    return 0
}

# comm on &0 and &4. The two inputs must contain sorted uniq lines. Only
# the first field of &0 is considered, but the whole line is output.

fcomm () {
    local l1= l2= k1=

    while true
    do
        read -r l1          || return 0
        k1="${l1%%$HT*}"
        read -r l2 <&4      || return 0

        while [ "$k1" "<" "$l2" ]
        do
            read -r l1      || return 0
            k1="${l1%%$HT*}"
        done
        while [ "$l2" "<" "$k1" ]
        do
            read -r l2 <&4  || return 0
        done
        [ "$k1" = "$l2" ] && echo "$l1"
    done
    
    return 0
}

# comm on two variables

vcomm () {
    echo -n "$2" | (
        exec 4<&0
        echo -n "$1" | fcomm
    )
}

confirm () {
    local choice=

    while [ $# -gt 1 ]
    do
        echo "$1"
        shift
    done
    echo -n "$1"

    read choice
    case "$choice" in
        [Yy]|[Yy][Ee][Ss])  return 0    ;;
        *)                  return 1    ;;
    esac
}

# mktemp(1) is in /usr/bin
mkdtemp () {
    local prefix="$1"

    local rand="$(head -c8 /dev/random | sha1 | head -c8)"
    local try="/tmp/$prefix.$rand"
    local i=1

    until [ $i -gt 5 ] || mkdir "$try" 2>/dev/null
    do
        i=$((i + 1))
        rand="$(head -c8 /dev/random | sha1 | head -c8)"
        try="/tmp/$prefix.$rand"
    done

    [ -d "$try" ] || die "Can't create temporary directory"
    echo "$try"
}

# check if boot environment exists
zfs_exist() { # 1=DATASET
    zfs list -H -o name "${1}" 1> /dev/null 2> /dev/null
}

assert_be_exist() {
    if ! zfs_exist "$1" 
    then
        die "Boot environment '${1##*/}' does not exist"
    fi
}

resolve_be () {
    local opt_e= opt_s= be=
    doopts "es" be -- "$@"

    local at=
    [ -n "$opt_s" ] && at="@"
    fnmatch "$be" "*[!-${at}a-zA-Z0-9]*" &&
        die "Bad BE name '$be'"

    be="$BEROOT/$be"
    [ -n "$opt_e" ] && assert_be_exist "$be"

    echo "$be"
}

# check if argument is a snapshot
zfs_snap() { # 1=DATASET/SNAPSHOT
    zfs list -Ho name -t snapshot "$1" >/dev/null 2>/dev/null
}

zfs_get() {
    zfs get -Ho value $1 "$2"
}

# check if boot environment is mounted
zfs_mounted() { # 1=BE
    [ $(zfs_get mounted "$1") = "yes" ]
}

# This returns the real current mountpoint, not the mountpoint property.
zfs_mountpoint () {
    local zfs="$1"
    local fs= dir= fstype= rest=

    # Unfortunately zfs(8) doesn't give us this information, so we have
    # to go grovelling around in the output of mount(8).
    mount -p | while read fs dir fstype rest
    do
        [ "$fstype" = zfs ] || continue
        [ "$fs" = "$zfs" ]  || continue
        echo "$dir"
        return
    done
}

# check if boot environment is a clone
zfs_clone() { # 1=DATASET
    if zfs_exist "$1"
    then
        if [ "$(zfs_get origin "$1")" = "-" ]
        then
            # boot environment is not a clone
            return 1
        else
            # boot environment is a clone
            return 0
        fi
    else
        # boot environment does not exist
        return 2
    fi
}

# check if system has a grub.cfg file and update it
maybe_update_grub () {
    [ "$GRUB" = YES ] || return 0

    if [ -e /boot/grub/grub.cfg ]
    then
        # XXX Where does grub-mkconfig live? Which grub.cfg should we
        # be using, the one on the current system or the one on the new
        # BE?
        if doit grub-mkconfig -o /boot/grub/grub.cfg
        then
            echo "GRUB configuration updated successfully"
        else
            echo "WARNING: Failed to update GRUB configuration"
        fi
    fi
}

# FreeBSD systems before 10.0 need vfs.root.mountfrom set in
# loader.conf. Later FreeBSD systems don't, so leave it alone.
# Assumes $1 is unmounted.
maybe_update_loader () {
    local be="$1"
    local mnt="$(mkdtemp beadm)"
    local l=

    doit mount -t zfs "$be" "$mnt"
    # freebsd-version was introduced in 10.0.
    if [ -e "$mnt/bin/freebsd-version" ]
    then
        for l in loader.conf loader.conf.local
        do
            [ -e "$mnt/boot/$l" ] || continue
            qgrep '^vfs\.root\.mountfrom=' <"$mnt/boot/$l" && warn \
                "vfs.root.mountfrom appears to be set in /boot/$l." \
                "This is unnecessary and unhelpful with FreeBSD 10+."
        done
    else
        for l in loader.conf loader.conf.local
        do
            l="$mnt/boot/$l"
            [ -e "$l" ] || continue
            doit sed -i~ -e'/vfs\.root\.mountfrom=/d' "$l"
            doit rm "$l~"
        done
        local vrm="vfs.root.mountfrom=\"zfs:$be\""
        if [ $DOIT = YES ]
        then
            echo "$vrm" >>"$mnt/boot/loader.conf"
        else
            echo "- echo '$vrm' >>$mnt/boot/loader.conf" >&3
        fi
    fi
    doit umount "$mnt"
    doit rmdir "$mnt"
}

## BE FUNCTIONS

# XXX A lot of this is wrong. It should be possible to use beadm to
# initialize a BE on a system not yet configured for them.
beadm_init () {
    ROOTFS="$(zfs list -Ho name /)"
    [ -n "$ROOTFS" ] || die "This system does not boot from ZFS pool"
    fnmatch "$ROOTFS" "*/*/*" ||
        die "This system is not configured for boot environments"

    GRUB=NO
    BEDS=ROOT # XXX I'd like to get rid of this...
    [ -f /usr/local/etc/beadm.conf ] && . /usr/local/etc/beadm.conf

    POOL="${ROOTFS%%/*}"
    BEROOT="$POOL/$BEDS"
    BOOTFS="$(zpool list -H -o bootfs "${POOL}")"

    if [ -z "${BOOTFS}" -o "${BOOTFS}" = "-" ]
    then
        die "ZFS boot pool '${POOL}' has unset 'bootfs' property"
    fi
}

beadm_new() {
    local source="$1"
    local dest="$2"
    local snap=

    if in_str "$source" "@"
    then
        # create boot environment from snapshot
        snap="${source##*@}"
        source="${source%@*}"

        zfs list -r -H -t filesystem -o name "$source" \
        | while t_read fs
        do
            zfs_exist "$fs@$snap" ||
                die "Child snapshot '$fs@$snap' does not exist"
        done
    else
        # create boot environment from other boot environment
        snap=$(date "+beadm-%Y%m%d%H%M%S")
        local mk="$source@$snap"

        zfs_exist "$mk" && 
            die "Snapshot '$mk' already exists"
        doit zfs snapshot -r "$mk" ||
            die "Cannot create snapshot '$mk'"
    fi

    # clone properties of source boot environment
    zfs list -Ho name -rt filesystem ${source} \
    | while read fs
    do
        local opts="-o canmount=off"
        # This can't be zfs | while, since the while ends up in a
        # subshell and can't set opts
        while t_read name property value
        do
            [ -z "$property" ]              && continue
            [ "$property" = "canmount" ]    && continue
            opts="$opts -o $property=\"$value\""
        done <<PROP
        $(zfs get -Ho name,property,value -s local,received all "$fs")
PROP

        local clone="$dest${fs#$source}"
        # sometimes I really hate shell...
        eval "doit zfs clone $opts \"$fs@$snap\" \"$clone\""

        # Cloning with canmount set to any value other than 'off' will
        # automount the filesystem, which would be Very Bad. So if we
        # want it to be 'noauto' we need to reset it now.
        local canmount="$(zfs_get canmount "$fs")"
        [ "$canmount" != "off" ] && doit zfs set canmount=noauto "$clone"
    done

    maybe_update_grub
    maybe_update_loader "$dest"
}

## BEADM COMMANDS

beadm_list () {
    [ -x /usr/bin/awk ] || die "beadm list needs /usr/bin/awk"

    OPTION_a=0
    OPTION_D=0
    OPTION_s=0
    while getopts "aDHs" OPT
    do
        case ${OPT} in
            (a) OPTION_a=1 ;;
            (D) OPTION_D=1 ;;
            (H) OPTION_H=1 ;;
            (s) OPTION_s=1
                    OPTION_a=1 ;;
            (*) usage    ;;
        esac
    done
    /usr/bin/awk -v POOL="${POOL}" \
            -v BEDS="${BEDS}" \
            -v ROOTFS="${ROOTFS}" \
            -v BOOTFS="${BOOTFS}" \
            -v OPTION_a="${OPTION_a}" \
            -v OPTION_D="${OPTION_D}" \
            -v OPTION_H="${OPTION_H}" \
            -v OPTION_s="${OPTION_s}" \
      'function __normalize(VALUE) {
            if(VALUE == "-" || VALUE == 0)
                return 0
            else
                return substr(VALUE, 1, length(VALUE) - 1) * MULTIPLIER[substr(VALUE, length(VALUE))]
        }
        function __show_units(VALUE) {
                      if(VALUE < 1024)                {                               UNIT = "K"; }
            else if(VALUE < 1048576)             { VALUE /= 1024;                UNIT = "M"; }
            else if(VALUE < 1073741824)          { VALUE /= 1048576;             UNIT = "G"; }
            else if(VALUE < 1099511627776)       { VALUE /= 1073741824;          UNIT = "T"; }
            else if(VALUE < 1125899906842624)    { VALUE /= 1099511627776;       UNIT = "P"; }
            else if(VALUE < 1152921504606846976) { VALUE /= 1125899906842624;    UNIT = "E"; }
            else                                 { VALUE /= 1152921504606846976; UNIT = "Z"; }
            return sprintf("%.1f%s", VALUE, UNIT)
        }
        function __get_bename(BENAME) {
            sub(BENAME_BEGINS_WITH "\/", "", BENAME)
            sub("/.*", "", BENAME)
            return BENAME
        }
        function __convert_date(DATE) {
            CMD_DATE = "date -j -f \"%a %b %d %H:%M %Y\" \"" DATE "\" +\"%Y-%m-%d %H:%M\""
            CMD_DATE | getline NEW
            close(CMD_DATE)
            return NEW
        }
        BEGIN {
            BENAME_BEGINS_WITH = POOL "/" BEDS
            MULTIPLIER["K"] = 1
            MULTIPLIER["M"] = 1024
            MULTIPLIER["G"] = 1048576
            MULTIPLIER["T"] = 1073741824
            MULTIPLIER["P"] = 1099511627776
            MULTIPLIER["E"] = 1125899906842624
            MULTIPLIER["Z"] = 1152921504606846976
            MOUNTPOINT_LENGTH = 10
            FSNAME_LENGTH = 2
            if(OPTION_a == 1)
                FSNAME_LENGTH = 19
            CMD_MOUNT="mount"
            while(CMD_MOUNT | getline)
                if($1 ~ "^" BENAME_BEGINS_WITH)
                    MOUNTS[$1] = $3
            close(CMD_MOUNT)
            FS = "\\t"
            CMD_ZFS_LIST = "zfs list -H -t all -s creation -o name,used,usedds,usedbysnapshots,usedrefreserv,refer,creation,origin -r "
            while(CMD_ZFS_LIST BENAME_BEGINS_WITH | getline) {
                if($1 != BENAME_BEGINS_WITH) {
                    FSNAME = $1
                    FSNAMES[length(FSNAMES) + 1] = FSNAME
                    USED              = __normalize($2)
                    USEDBYDATASET     = __normalize($3)
                    USEDBYSNAPSHOTS   = __normalize($4)
                    USEDREFRESERV     = __normalize($5)
                    REFER[FSNAME]     = __normalize($6)
                    CREATIONS[FSNAME] = $7
                    ORIGINS[FSNAME]   = $8
                    if(FSNAME ~ /@/)
                        SPACES[FSNAME] = USED
                    else {
                        SPACES[FSNAME] = USEDBYDATASET + USEDREFRESERV
                        if(OPTION_D != 1)
                            SPACES[FSNAME] += USEDBYSNAPSHOTS
                        BE = " " __get_bename(FSNAME) " "
                        if(index(BELIST, BE) == 0)
                            BELIST = BELIST " " BE
                        MOUNTPOINT = MOUNTS[FSNAME]
                        if(MOUNTPOINT) {
                            if((OPTION_a == 0 && FSNAME == (BENAME_BEGINS_WITH "/" __get_bename(FSNAME))) || (OPTION_a == 1)) {
                                LM = length(MOUNTPOINT)
                                if(LM > MOUNTPOINT_LENGTH)
                                    MOUNTPOINT_LENGTH = LM
                            }
                        }
                        else
                            MOUNTPOINT = "-"
                    }
                    if(OPTION_a == 1)
                        LF = length(FSNAME)
                    else if(FSNAME !~ /@/)
                        LF = length(__get_bename(FSNAME))
                    if(LF > FSNAME_LENGTH)
                        FSNAME_LENGTH = LF
                }
            }
            close(CMD_ZFS_LIST)
            split(BELIST, BENAMES, " ")
            if(OPTION_a == 1) {
                BE_HEAD = "BE/Dataset/Snapshot"
                printf "%-" FSNAME_LENGTH + 2 "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", BE_HEAD, "Active", "Mountpoint", "Space", "Created"
            }
            else if(OPTION_H == 1)
                BE_HEAD = ""
            else {
                BE_HEAD = "BE"
                printf "%-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", BE_HEAD, "Active", "Mountpoint", "Space", "Created"
            }
            if(OPTION_s != 1)
                SNAPSHOT_FILTER = "(/[^@]*)?$"
            for(I = 1; I <= length(BENAMES); I++) {
                BENAME = BENAMES[I]
                if(OPTION_a == 1) {
                    printf "\n"
                    print BENAME
                    for(J = 1; J <= length(FSNAMES); J++) {
                        FSNAME = FSNAMES[J]
                        if(FSNAME ~ "^" BENAME_BEGINS_WITH "/" BENAME SNAPSHOT_FILTER) {
                            ACTIVE = ""
                            if(FSNAME == ROOTFS)
                                ACTIVE = ACTIVE "N"
                            if(FSNAME == BOOTFS)
                                ACTIVE = ACTIVE "R"
                            if(! ACTIVE)
                                ACTIVE = "-"
                            MOUNTPOINT = MOUNTS[FSNAME]
                            if(! MOUNTPOINT)
                                MOUNTPOINT = "-"
                            printf "  %-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", FSNAME, ACTIVE, MOUNTPOINT, __show_units(SPACES[FSNAME]), __convert_date(CREATIONS[FSNAME])
                            ORIGIN = ORIGINS[FSNAME]
                            ORIGIN_DISPLAY = ORIGIN
                            sub(BENAME_BEGINS_WITH "/", "", ORIGIN_DISPLAY)
                            if(ORIGIN != "-") {
                                if(OPTION_D == 1)
                                    SPACE = REFER[ORIGIN]
                                else
                                    SPACE = SPACES[ORIGIN]
                                printf  "  %-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", "  " ORIGIN_DISPLAY, "-", "-", __show_units(SPACE), __convert_date(CREATIONS[ORIGIN])
                            }
                        }
                    }
                }
                else {
                    SPACE = 0
                    ACTIVE = ""
                    NAME = BENAME_BEGINS_WITH "/" BENAME
                    if(NAME == ROOTFS)
                        ACTIVE = ACTIVE "N"
                    if(NAME == BOOTFS)
                        ACTIVE = ACTIVE "R"
                    if(! ACTIVE)
                        ACTIVE = "-"
                    for(J = 1; J <= length(FSNAMES); J++) {
                        FSNAME = FSNAMES[J]
                        if(FSNAME ~ "^" BENAME_BEGINS_WITH "/" BENAME "(/[^@]*)?$") {
                            if((BENAME_BEGINS_WITH "/" BENAME) == FSNAME) {
                                MOUNTPOINT = MOUNTS[FSNAME]
                                if(! MOUNTPOINT)
                                    MOUNTPOINT = "-"
                                CREATION = __convert_date(CREATIONS[FSNAME])
                            }
                            ORIGIN = ORIGINS[FSNAME]
                            if(ORIGIN == "-")
                                SPACE += SPACES[FSNAME]
                            else {
                                if(OPTION_D == 1)
                                    SPACE += REFER[FSNAME]
                                else
                                    SPACE += SPACES[FSNAME] + SPACES[ORIGIN]
                            }
                        }
                    }
                    if(OPTION_H == 1)
                        printf "%s\t%s\t%s\t%s\t%s\n", BENAME, ACTIVE, MOUNTPOINT, __show_units(SPACE), CREATION
                    else
                        printf "%-" FSNAME_LENGTH "s %-6s %-" MOUNTPOINT_LENGTH "s %6s %s\n", BENAME, ACTIVE, MOUNTPOINT, __show_units(SPACE), CREATION
                }
            }
        }'
}

# This has a bizarre calling convention: if the argument has an '@' in,
# we are making a snapshot, otherwise we are creating a whole new BE. I
# assume this comes from Solaris...
beadm_create () {
    local opt_e= name=
    doopts "e:" name -- "$@" || usage

    if in_str "$name" "@"
    then
        # making a snapshot
        [ -n "$opt_e" ] && usage
        local snap=$(resolve_be -s "$name")

        doit zfs snapshot -r $snap ||
            die "Cannot create '$snap' recursive snapshot"
    else
        # making a new BE
        local source=
        if [ -n "$opt_e" ]
        then
            source=$(resolve_be -se "$opt_e")
        else
            source=$ROOTFS
        fi

        local dest=$(resolve_be "$name")
        zfs_exist $dest && die "Boot environment '$name' already exists"

        beadm_new $source $dest
    fi

    echo "Created successfully"
}

beadm_activate () {
    [ $# -eq 1 ] || usage
    local newbe="$1"
    local newroot=$(resolve_be -e "$newbe")

    if [ "$BOOTFS" = "$newroot" ]
    then
        echo "Already active"
        return
    fi

    # We are allowed to activate the current root, which obviously we
    # must not try to unmount. We may have temporarily booted into this
    # BE, or we may be resetting the active BE.
    if zfs_mounted $newroot && [ "$newroot" != "$ROOTFS" ]
    then
        beadm_umount "$newbe"
    fi

    # The correct settings for a root fs are canmount=noauto,
    # mountpoint=/. The old recommendation of mountpoint=legacy
    # causes problems with subordinate fsen which expect to inherit
    # their mountpoint, which is why Sun introduced the canmount
    # property in the first place. 
    doit zfs set canmount=noauto $newroot
    if [ "$newroot" = "$ROOTFS" ]
    then
        # Don't try to change the mountpoint property of the current
        # root, it makes a mess.
        [ "$(zfs_get mountpoint $newroot)" = "/" ] || warn \
            "Can't change the mountpoint property of '$newroot'." \
            "Filesystems below it may inherit the wrong mountpoint." \
            "Consider changing it in single-user mode."
    else
        # Since the fs is currently unmounted, changing mountpoint will
        # not cause zfs to remount the fs over the current root. 
        doit zfs set mountpoint=/ $newroot
    fi
    doit zpool set bootfs=$newroot $POOL
    maybe_update_grub

    # The rest of the activation happens after reboot, in rc.d/zfs_be.
    echo "Activated successfully"
}

beadm_destroy () {
    local be=
    doopts "F" be -- "$@" || usage

    local destroy=$(resolve_be -e "$be")
    case "$destroy" in
    $ROOTFS)
        die "Cannot destroy current boot environment"   ;;
    $BOOTFS)
        die "Cannot destroy active boot environment"    ;;
    esac

    if [ -z "$opt_F" ] && ! confirm \
        "Are you sure you want to destroy '$be'?" \
        "This action cannot be undone (y/[n]): "
    then
        echo "Boot environment '$be' has not been destroyed"
        return
    fi
            
    if zfs_snap $destroy
    then
        doit zfs destroy -r $destroy ||
            die "Cannot destroy snapshot '$be'"
        return
    fi

    local origin_snapshots=
    if zfs_clone $destroy
    then
        # promote clones dependent on snapshots used by destroyed boot
        # environment
        local name= origin=
        zfs list -Ho name,origin -r $POOL \
        | while t_read name origin
        do
            case "$origin" in
            $destroy@*|$destroy/*@*)
                doit zfs promote "$name" ;;
            esac
        done

        origin_snapshots="$(
            zfs list -Ho origin -s origin -r $destroy \
            | while t_read origin
            do
                [ "$origin" = "-" ] && continue
                echo ${origin##*@}
            done \
            | uniq
        )"
    fi

    # check if boot environment was created from existing snapshot
    local origin=$(zfs_get origin $destroy)
    local origin_snap="${origin##*@}"
    local destroy_origin=NO

    # XXX There was some gubbins here about checking the creation date
    # against the name of the snapshot. I don't think this is reliable:
    # it's easier for the user if all @beadm-* snapshots belong to us.
    if [ "$origin" != "-" ]
    then
        if [ -n "$opt_F" ] \
        || fnmatch "$origin_snap" "beadm-*" \
        || confirm
            "Boot environment '${destroy}' was created from a snapshot." \
            "Destroy '$origin'? (y/[n]): "
        then
            destroy_origin=YES
        fi
    fi
        
    # destroy boot environment
    doit zfs destroy -r $destroy

    if zfs_clone $destroy
    then
        # promote datasets dependent on origins used by destroyed boot
        # environment
        local s= i= rest=
        local ALL_ORIGINS="$(zfs list -H -t all -o name,origin -r ${POOL})"
        echo "$origin_snapshots" \
        | while t_read s
        do
            echo "${ALL_ORIGINS}" \
            | sgrep "@${s}$" \
            | vgrep "^${destroy}" \
            | while t_read i rest
            do
                doit zfs promote "$i"
            done
        done
    fi

    if [ "$destroy_origin" = YES ]
    then
        # destroy origins used by destroyed boot environment
        # XXX This is terrifying. If I'm reading it right, it will
        # destroy all snapshots in the pool which happen to be named the
        # same as the source snap of the destroyed BE.
        local SNAPSHOTS="$(zfs list -H -t snapshot -o name -r ${POOL})"
        local s= i=
        echo "$origin_snapshots" \
        | while read s
        do
            echo "$SNAPSHOTS" \
            | sgrep "@${s}$" \
            | while read i
            do
                doit zfs destroy ${I}
            done
        done
    fi

    [ "${GRUB}" = YES ] && update_grub

    echo "Destroyed successfully"
}

beadm_rename () {
    local obe= nbe= ofs= nfs=
    doopts - obe nbe -- "$@" || usage

    ofs=$(resolve_be -e "$obe")
    nfs=$(resolve_be "$nbe")

    case "$obe" in
    $ROOTFS)
        die "Cannot rename current boot environment"    ;;
    $BOOTFS)
        die "Cannot rename active boot environment"     ;;
    esac
    zfs_exist $nfs && die "Boot environment '$nbe' already exists"

    doit zfs rename $ofs $nfs
    maybe_update_grub
    echo "Renamed successfully"
}

beadm_mount () {
    local be= target=
    [ $# -lt 1 -o $# -gt 2 ] && usage
    be="$1"
    if [ ${#} -eq 1 ]
    then
        target=$(mkdtemp "BE-$be")
    else
        target="$2"
    fi

    befs=$(resolve_be -e "$be")
    [ "$(zfs_get mountpoint $befs)" = "/" ] ||
        die "Mountpoint for '$befs' is not set properly." \
            "A root fs should have mountpoint=/, canmount=noauto."

    local fs= canm= dir=
    zfs list -Ho name,canmount,mountpoint -s mountpoint -r $befs \
    | while t_read fs canm dir
    do
        [ "$canm" = off ]           && continue
        case "$dir" in
            legacy|none) continue ;;
            /*) ;;
            *) die "Bad mountpoint '$dir' for '$fs'" ;;
        esac

        if zfs_mounted "$fs"
        then
            local mnt="$(zfs_mountpoint "$fs")"
            die "'$fs' is already mounted on '$mnt'"
        fi

        dir="$target$dir"
        doit mkdir -p "$dir" || die "Cannot create mountpoint '$dir'"
        doit mount -t zfs "$fs" "$dir" ||
            die "Cannot mount '$fs' on '$dir'"
    done

    echo "Mounted successfully on '${target}'"
}

beadm_umount () {
    local opt_f= be=
    doopts "f" be -- "$@" || usage

    local befs=$(resolve_be -e "$be")
    local mnt="$(zfs_mountpoint $befs)"

    [ "$befs" = "$ROOTFS" ] && die \
        "Cannot unmount current boot environment"

    local fs=
    zfs list -Ho name -S mountpoint -r $befs \
    | while read fs
    do
        local dir="$(zfs_mountpoint "$fs")"
        [ -n "$dir" ] || continue
        doit umount $opt_f "$dir" || die \
            "Cannot umount '$fs' (mounted on '$dir')"
    done

    if fnmatch "$mnt" "/tmp/BE-*"
    then
        doit rmdir "$mnt"
    fi

    echo "Unmounted successfully"
}

## MAIN

[ "$(sysctl -n kern.osreldate)" -lt 800000 ] &&
    die "beadm works on FreeBSD 8.0 or later"

if [ "${1}" = "--version" -o "${1}" = "version" ]
then
    echo "beadm 1.0 2013/10/13"
    exit 0
fi

beadm_init

while getopts "nv" opt
do
    case $opt in
    n) DOIT="NO"       ;;
    v) VERBOSE="YES"   ;;
    esac
done
shift $(( $OPTIND - 1 ))

[ $# -eq 0 ] && usage
command="$1"
shift

case "$command" in
    list)       beadm_list "$@"         ;;
    create)     beadm_create "$@"       ;;
    activate)   beadm_activate "$@"     ;;
    destroy)    beadm_destroy "$@"      ;;
    rename)     beadm_rename "$@"       ;;
    mount)      beadm_mount "$@"        ;;
    unmount|umount)
                beadm_umount "$@"       ;;

    *)          usage                   ;;
esac
